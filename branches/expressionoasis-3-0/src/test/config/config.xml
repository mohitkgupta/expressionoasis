<?xml version="1.0" encoding="UTF-8"?>
<expressionOasis>

    <cacheCompiledExpressions>True</cacheCompiledExpressions>

    <functionProviders>
        <functionProvider className="org.ganges.expressionengine.extensions.DefaultFunctionProvider">
            <constructorArgs>
                <constructorArg className="java.lang.Class" value="org.ganges.expressionengine.extensions.MathFunctions"/>
            </constructorArgs>
        </functionProvider>
        <functionProvider className="org.ganges.expressionengine.extensions.DefaultFunctionProvider" >
            <constructorArgs>
                <constructorArg className="java.lang.Class" value="org.ganges.expressionengine.extensions.StringFunctions"/>
            </constructorArgs>
        </functionProvider>
        <functionProvider className="org.ganges.expressionengine.extensions.customfunctions.CustomFunctionProvider">
            <constructorArgs>
                <constructorArg className="java.lang.Class" value="org.ganges.expressionengine.extensions.customfunctions.xml.XMLCustomFunctionSourceProvider"/>
            </constructorArgs>
        </functionProvider>
        <functionProvider className="org.ganges.expressionengine.extensions.XMLFunctionProvider"/>
    </functionProviders>

<grammar>

	<ignoreBlank name="true"/>

	<delimiters>

		<delimiter name=" "/>
		<delimiter name="+"/>
		<delimiter name="-"/>
		<delimiter name="*"/>
		<delimiter name="%"/>
		<delimiter name="/"/>
		<delimiter name="("/>
		<delimiter name=")"/>
		<delimiter name=","/>
		<delimiter name="."/>
		<delimiter name="]"/>
		<delimiter name="["/>
		<!-- added = sign extra as delimiter, however we are not using it in expressions,
		just to support parsing of ==.
		Parser used to check each token for whether it is a delimiter or not,
		so if we don't add = sign here, it ignore it and add it to its operand. -->
		<delimiter name="="/>
		<delimiter name="=="/>
		<delimiter name="&gt;"/>
		<delimiter name="&lt;"/>
		<delimiter name="&gt;="/>
		<delimiter name="&lt;="/>
		<delimiter name="!="/>
		<delimiter name="!"/>
		<delimiter name="&amp;&amp;"/>
		<delimiter name="&amp;"/>
		<delimiter name="||"/>
		<delimiter name="|"/>
		<delimiter name="~"/>
		<delimiter name="^"/>
		<delimiter name="&lt;&lt;"/>
		<delimiter name="&gt;&gt;"/>
		<delimiter name="&gt;&gt;&gt;"/>
		<delimiter name="?"/>
		<delimiter name=":"/>

	</delimiters>

	<binaryOperators>
		<operator name="," precedence="0"/>

		<!-- all assignment operators -->
		<!--operator name="?:" precedence="2"/-->
		<operator name="?" precedence="2"/>
		<operator name=":" precedence="2"/>

		<operator name="||" precedence="3"/>
		<operator name="&amp;&amp;" precedence="3"/>

		<operator name="|" precedence="4"/>

		<operator name="^" precedence="5"/>

		<operator name="&amp;" precedence="6"/>

		<operator name="==" precedence="7"/>
		<operator name="!=" precedence="7"/>

		<operator name="&gt;" precedence="8"/>
		<operator name="&lt;" precedence="8"/>
		<operator name="&gt;=" precedence="8"/>
		<operator name="&lt;=" precedence="8"/>

		<operator name="&lt;&lt;" precedence="9"/>
		<operator name="&gt;&gt;" precedence="9"/>
		<operator name="&gt;&gt;&gt;" precedence="9"/>

		<operator name="+" precedence="10"/>
		<operator name="-" precedence="10"/>

		<operator name="*" precedence="11"/>
		<operator name="%" precedence="11"/>
		<operator name="." precedence="11"/>
		<operator name="/" precedence="11"/>
		<operator name="[]" precedence="11"/>

	</binaryOperators>

	<unaryOperators>
		<operator name="~" precedence="12"/>
		<operator name="+" precedence="12"/>
		<operator name="." precedence="12"/>
		<operator name="-" precedence="12"/>
		<operator name="/" precedence="12"/>
		<operator name="!" precedence="12"/>
		<operator name="()" precedence="12"/>
	</unaryOperators>

	<functions>

        </functions>

	<brackets>
		<bracket left="(" right=")"/>
		<bracket left="[" right="]"/>
	</brackets>

	<productionRules>
		<productionRule name="Numeric Rule" approchablePattern="[0-9]+" allowedPattern="[0-9]+"/>
		<productionRule name="Decimal Rule" approchablePattern="([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)" allowedPattern="([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)"/>
                <productionRule name="Identifier Rule" approchablePattern="[A-Za-z_][A-Za-z_0-9]+" allowedPattern="[A-Za-z_][A-Za-z_0-9]*"/>
		<productionRule name="String Rule" approchablePattern="'([^']|[\\]['])*" allowedPattern="'[^'\\]*(\\.[^'\\]*)*'"/>
	</productionRules>

</grammar>

    <expressions>
        <expression name="?" className="org.ganges.expressionengine.expressions.booleanexp.ConditionTernaryExpression" type="binary"/>
        <expression name=":" className="org.ganges.expressionengine.expressions.booleanexp.ResultTernaryExpression" type="binary"/>

        <expression name="||" className="org.ganges.expressionengine.expressions.booleanexp.OrExpression" type="binary"/>
        <expression name="&amp;&amp;" className="org.ganges.expressionengine.expressions.booleanexp.AndExpression" type="binary"/>
        <expression name="!" className="org.ganges.expressionengine.expressions.booleanexp.NotExpression" type="unary"/>

        <expression name="==" className="org.ganges.expressionengine.expressions.relational.EQExpression" type="binary"/>
        <expression name="!=" className="org.ganges.expressionengine.expressions.relational.NEExpression" type="binary"/>
        <expression name="&gt;" className="org.ganges.expressionengine.expressions.relational.GTExpression" type="binary"/>
        <expression name="&lt;" className="org.ganges.expressionengine.expressions.relational.LTExpression" type="binary"/>
        <expression name="&gt;=" className="org.ganges.expressionengine.expressions.relational.GTEExpression" type="binary"/>
        <expression name="&lt;=" className="org.ganges.expressionengine.expressions.relational.LTEExpression" type="binary"/>

        <expression name="+" className="org.ganges.expressionengine.expressions.arithmatic.PlusExpression" type="unary"/>
        <expression name="-" className="org.ganges.expressionengine.expressions.arithmatic.MinusExpression" type="unary"/>
        <expression name="+" className="org.ganges.expressionengine.expressions.arithmatic.AddExpression" type="binary"/>
        <expression name="-" className="org.ganges.expressionengine.expressions.arithmatic.SubtractExpression" type="binary"/>
        <expression name="*" className="org.ganges.expressionengine.expressions.arithmatic.MultiplyExpression" type="binary"/>
        <expression name="/" className="org.ganges.expressionengine.expressions.arithmatic.DivideExpression" type="binary"/>
        <expression name="%" className="org.ganges.expressionengine.expressions.arithmatic.RemainderExpression" type="binary"/>
        <expression name="[]" className="org.ganges.expressionengine.expressions.arithmatic.ArrayIndexExpression" type="binary"/>

        <expression name="." className="org.ganges.expressionengine.expressions.property.PropertyExpression" type="binary"/>
        <expression name="," className="org.ganges.expressionengine.expressions.property.ArgumentExpression" type="binary"/>

        <expression name="()" className="org.ganges.expressionengine.expressions.arithmatic.ParanthesisExpression" type="unary"/>
        <expression name="." className="org.ganges.expressionengine.expressions.property.UnaryPropertyExpression" type="unary"/>

        <expression name="&amp;" className="org.ganges.expressionengine.expressions.bitwise.BWAndExpression" type="binary"/>
        <expression name="|" className="org.ganges.expressionengine.expressions.bitwise.BWOrExpression" type="binary"/>
        <expression name="^" className="org.ganges.expressionengine.expressions.bitwise.BWXorExpression" type="binary"/>
        <expression name="~" className="org.ganges.expressionengine.expressions.bitwise.BWComplementExpression" type="unary"/>
        <expression name="&lt;&lt;" className="org.ganges.expressionengine.expressions.bitwise.BWSignedLeftShiftExpression" type="binary"/>
        <expression name="&gt;&gt;" className="org.ganges.expressionengine.expressions.bitwise.BWSignedRightShiftExpression" type="binary"/>
        <expression name="&gt;&gt;&gt;" className="org.ganges.expressionengine.expressions.bitwise.BWUnsignedRightShiftExpression" type="binary"/>

        <expression name="[0-9]+" className="org.ganges.expressionengine.expressions.NumericExpression" type="operand"/>
        <expression name="([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)" className="org.ganges.expressionengine.expressions.DecimalExpression" type="operand"/>
        <expression name="[A-Za-z_][A-Za-z_0-9]*" className="org.ganges.expressionengine.expressions.IdentifierExpression" type="operand"/>
        <expression name="'[^'\\]*(\\.[^'\\]*)*'" className="org.ganges.expressionengine.expressions.StringExpression" type="operand"/>
        <expression name="[t][r][u][e]" className="org.ganges.expressionengine.expressions.BooleanExpression" type="operand"/>
        <expression name="[f][a][l][s][e]" className="org.ganges.expressionengine.expressions.BooleanExpression" type="operand"/>
        <expression name="[n][u][l][l]" className="org.ganges.expressionengine.expressions.NullExpression" type="operand"/>
    </expressions>
    
</expressionOasis>