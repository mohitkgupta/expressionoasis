<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE grammar [
  <!ELEMENT grammar (ignoreBlank, delimiters, binaryOperators, unaryOperators, functions, brackets, productionRules)>
  <!ELEMENT ignoreBlank EMPTY>
  <!ATTLIST ignoreBlank name CDATA #REQUIRED>
  <!ELEMENT delimiters (delimiter*)>
  <!ELEMENT delimiter EMPTY>
  <!ATTLIST delimiter name CDATA #REQUIRED>
  <!ELEMENT binaryOperators (operator*)>
  <!ELEMENT unaryOperators (operator*)>
  <!ELEMENT functions (operator*)>
  <!ELEMENT operator EMPTY>
  <!ATTLIST operator name CDATA #REQUIRED>
  <!ATTLIST operator precedence CDATA #REQUIRED>
  <!ELEMENT brackets (bracket*)>
  <!ELEMENT bracket EMPTY>
  <!ATTLIST bracket left CDATA #REQUIRED>
  <!ATTLIST bracket right CDATA #REQUIRED>  
  <!ELEMENT productionRules (productionRule*)>
  <!ELEMENT productionRule EMPTY>
  <!ATTLIST productionRule name CDATA #REQUIRED>
  <!ATTLIST productionRule approchablePattern CDATA #REQUIRED>
  <!ATTLIST productionRule allowedPattern CDATA #REQUIRED>
]>
<grammar>	

	<ignoreBlank name="true"/>
	
	<delimiters>
	
		<delimiter name=" "/>
		<delimiter name="+"/>
		<delimiter name="-"/>		
		<delimiter name="*"/>
		<delimiter name="%"/>		
		<delimiter name="/"/>
		<delimiter name="("/>
		<delimiter name=")"/>
		<delimiter name=","/>		
		<delimiter name="."/>		
		<delimiter name="]"/>
		<delimiter name="["/>
		<!-- added = sign extra as delimiter, however we are not using it in expressions, 
		just to support parsing of ==. 
		Parser used to check each token for whether it is a delimiter or not, 
		so if we don't add = sign here, it ignore it and add it to its operand. -->
		<delimiter name="="/>
		<delimiter name="=="/>
		<delimiter name="&gt;"/>
		<delimiter name="&lt;"/>		
		<delimiter name="&gt;="/>
		<delimiter name="&lt;="/>
		<delimiter name="!="/>
		<delimiter name="!"/>
		<delimiter name="&amp;&amp;"/>
		<delimiter name="&amp;"/>
		<delimiter name="||"/>
		<delimiter name="|"/>
		<delimiter name="~"/>
		<delimiter name="^"/>
		<delimiter name="&lt;&lt;"/>
		<delimiter name="&gt;&gt;"/>
		<delimiter name="&gt;&gt;&gt;"/>
		<delimiter name="?"/>
		<delimiter name=":"/>
		
	</delimiters>	
	
	<binaryOperators>
		<operator name="," precedence="0"/>
		
		<!-- all assignment operators -->
		<!--operator name="?:" precedence="2"/-->
		<operator name="?" precedence="2"/>
		<operator name=":" precedence="2"/>
		
		<operator name="||" precedence="3"/>
		<operator name="&amp;&amp;" precedence="3"/>
		
		<operator name="|" precedence="4"/>

		<operator name="^" precedence="5"/>

		<operator name="&amp;" precedence="6"/>

		<operator name="==" precedence="7"/>
		<operator name="!=" precedence="7"/>
		
		<operator name="&gt;" precedence="8"/>
		<operator name="&lt;" precedence="8"/>		
		<operator name="&gt;=" precedence="8"/>
		<operator name="&lt;=" precedence="8"/>		
		
		<operator name="&lt;&lt;" precedence="9"/>
		<operator name="&gt;&gt;" precedence="9"/>		
		<operator name="&gt;&gt;&gt;" precedence="9"/>		
		
		<operator name="+" precedence="10"/>
		<operator name="-" precedence="10"/>		

		<operator name="*" precedence="11"/>
		<operator name="%" precedence="11"/>		
		<operator name="." precedence="11"/>
		<operator name="/" precedence="11"/>	
		<operator name="[]" precedence="11"/>	
		
	</binaryOperators>	
	
	<unaryOperators>
		<operator name="~" precedence="12"/>
		<operator name="+" precedence="12"/>
		<operator name="." precedence="12"/>		
		<operator name="-" precedence="12"/>
		<operator name="/" precedence="12"/>
		<operator name="!" precedence="12"/>
		<operator name="()" precedence="12"/>
	</unaryOperators>
	
	<functions>

        </functions>
	
	<brackets>
		<bracket left="(" right=")"/>
		<bracket left="[" right="]"/>
	</brackets>	
	
	<productionRules>
		<productionRule name="Numeric Rule" approchablePattern="[0-9]+" allowedPattern="[0-9]+"/>
		<productionRule name="Decimal Rule" approchablePattern="([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)" allowedPattern="([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)"/>
                <productionRule name="Identifier Rule" approchablePattern="(@{2})?[A-Za-z_][A-Za-z_0-9]+" allowedPattern="(@{2})?[A-Za-z_][A-Za-z_0-9]*"/>
		<productionRule name="String Rule" approchablePattern="'([^']|[\\]['])*" allowedPattern="'[^'\\]*(\\.[^'\\]*)*'"/>
	</productionRules>	
	
</grammar>